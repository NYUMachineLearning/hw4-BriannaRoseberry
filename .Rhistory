knitr::opts_chunk$set(echo = TRUE)
PimaIndiansDiabetes_num1 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(randomForest)
library(mlbench)
library(glmnet)
data(BreastCancer)
head(BreastCancer)
dim(BreastCancer)
summary(BreastCancer$Class)
BreastCancer_num = transform(BreastCancer, Id = as.numeric(Id),
Cl.thickness = as.numeric(Cl.thickness),
Cell.size = as.numeric(Cell.size),
Cell.shape = as.numeric(Cell.shape),
Marg.adhesion = as.numeric(Marg.adhesion),
Epith.c.size = as.numeric(Epith.c.size),
Bare.nuclei = as.numeric(Bare.nuclei),
Bl.cromatin = as.numeric(Bl.cromatin),
Normal.nucleoli = as.numeric(Normal.nucleoli),
Mitoses = as.numeric(Mitoses))
BreastCancer_num[is.na(BreastCancer_num)] = 0
#calculate correlation matrix using pearson correlation (others include spearman and kendall)
correlation_matrix = cor(BreastCancer_num[,1:10])
#visualize correlation matrix
library(corrplot)
corrplot(correlation_matrix, order = "hclust")
#apply correlation filter of 0.7
highly_correlated <- colnames(BreastCancer[, -1])[findCorrelation(correlation_matrix, cutoff = 0.7, verbose = TRUE)]
#which features are highly correlated and can be removed
highly_correlated
data(BreastCancer)
BreastCancer_num = transform(BreastCancer, Id = as.numeric(Id),
Cl.thickness = as.numeric(Cl.thickness),
Cell.size = as.numeric(Cell.size),
Cell.shape = as.numeric(Cell.shape),
Marg.adhesion = as.numeric(Marg.adhesion),
Epith.c.size = as.numeric(Epith.c.size),
Bare.nuclei = as.numeric(Bare.nuclei),
Bl.cromatin = as.numeric(Bl.cromatin),
Normal.nucleoli = as.numeric(Normal.nucleoli),
Mitoses = as.numeric(Mitoses))
BreastCancer_num[is.na(BreastCancer_num)] = 0
#define the control
control = rfeControl(functions = caretFuncs, number = 2)
# run the RFE algorithm
results = rfe(BreastCancer_num[,1:10], BreastCancer_num[,11], sizes = c(2,5,9), rfeControl = control, method = "svmRadial")
results
results$variables
set.seed(24)
#convert data
x = x <- as.matrix(BreastCancer_num[,1:10])
y = as.double(as.matrix(ifelse(BreastCancer_num[,11]=='benign', 0, 1)))
#fit Lasso model
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(cv.lasso)
cat('Min Lambda: ', cv.lasso$lambda.min, '\n 1Sd Lambda: ', cv.lasso$lambda.1se)
df_coef <- round(as.matrix(coef(cv.lasso, s=cv.lasso$lambda.min)), 2)
# See all contributing variables
df_coef[df_coef[, 1] != 0, ]
#data
data(BreastCancer)
train_size <- floor(0.75 * nrow(BreastCancer))
set.seed(24)
train_pos <- sample(seq_len(nrow(BreastCancer)), size = train_size)
#convert to numeric
BreastCancer_num = transform(BreastCancer, Id = as.numeric(Id),
Cl.thickness = as.numeric(Cl.thickness),
Cell.size = as.numeric(Cell.size),
Cell.shape = as.numeric(Cell.shape),
Marg.adhesion = as.numeric(Marg.adhesion),
Epith.c.size = as.numeric(Epith.c.size),
Bare.nuclei = as.numeric(Bare.nuclei),
Bl.cromatin = as.numeric(Bl.cromatin),
Normal.nucleoli = as.numeric(Normal.nucleoli),
Mitoses = as.numeric(Mitoses))
BreastCancer_num[is.na(BreastCancer_num)] = 0
train_classification <- BreastCancer_num[train_pos, ]
test_classification <- BreastCancer_num[-train_pos, ]
#fit a model
rfmodel = randomForest(Class ~ Id + Cl.thickness + Cell.size + Cell.shape + Marg.adhesion + Epith.c.size + Bare.nuclei + Bl.cromatin + Normal.nucleoli +  Mitoses, data=train_classification,  importance = TRUE, oob.times = 15, confusion = TRUE)
#rank features based on importance
importance(rfmodel)
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
dim(PimaIndiansDiabetes)
summary(PimaIndiansDiabetes$diabetes)
PimaIndiansDiabetes_num1 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num1[is.na(PimaIndiansDiabetes_num1)] = 0
control1 = rfeControl(functions = caretFuncs, number = 2)
results1 = rfe(PimaIndiansDiabetes_num1[,1:8], PimaIndiansDiabetes_num1[,9], sizes = c(2,5,7), rfeControl = control1, method = "svmRadial")
results1
results1$variables
install.packages("Boruta")
library(tidyverse)
library(caret)
library(randomForest)
library(mlbench)
library(glmnet)
library(Boruta)
boruta_output <- Boruta(Cdiabetes ~ ., data=na.omit(PimaIndiansDiabetes), doTrace=0)
boruta_output <- Boruta(diabetes ~ ., data=na.omit(PimaIndiansDiabetes), doTrace=0)
names(boruta_output)
boruta_output1 <- Boruta(diabetes ~ ., data=na.omit(PimaIndiansDiabetes), doTrace=0)
names(boruta_output1)
data("PimaIndiansDiabetes")
boruta_output1 <- Boruta(diabetes ~ ., data=na.omit(PimaIndiansDiabetes), doTrace=0)
names(boruta_output1)
data("PimaIndiansDiabetes")
train_size2 <- floor(0.75 * nrow(PimaIndiansDiabetes))
set.seed(24)
head(trainData)
data("PimaIndiansDiabetes")
train_size2 <- floor(0.75 * nrow(PimaIndiansDiabetes))
set.seed(24)
head(train_size2)
data("PimaIndiansDiabetes")
base.mod <- lm(ozone_reading ~ 1 , data=trainData)
data("PimaIndiansDiabetes")
base.mod <- lm(ozone_reading ~ 1 , data=PimaIndiansDiabetes)
data("PimaIndiansDiabetes")
base.mod <- lm(diabetes ~ 1 , data=PimaIndiansDiabetes)
# Step 2: Full model with all predictors
all.mod1 <- lm(diabetes ~ . , data= PimaIndiansDiabetes)
# Step 3: Perform step-wise algorithm. direction='both' implies both forward and backward stepwise
stepMod1 <- step(base.mod, scope = list(lower = base.mod, upper = all.mod), direction = "both", trace = 0, steps = 1000)
install.packages('relaimpo')
library(tidyverse)
library(caret)
library(randomForest)
library(mlbench)
library(glmnet)
library(relaimpo)
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num)
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes)
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num1[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num1[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
head(lmMod1)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
lmMod1
# calculate relative importance
relImportance1 <- calc.relimp(lmMod1, type = "lmg", rela = F)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes_num2)
head(lmMod1)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
model_formula1 = diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age
lmMod1 <- lm(model_formula1, data=PimaIndiansDiabetes)
head(lmMod1)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
sa_ctrl1 <- safsControl(functions = rfSA,
method = "repeatedcv",
repeats = 3,
improve = 5) # n iterations without improvement before a reset
# Genetic Algorithm feature selection
set.seed(100)
sa_obj <- safs(x=PimaIndiansDiabetes_num2[, c(1:8)],
y=trainData[, 9],
safsControl = sa_ctrl)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
sa_ctrl1 <- safsControl(functions = rfSA,
method = "repeatedcv",
repeats = 3,
improve = 5) # n iterations without improvement before a reset
# Genetic Algorithm feature selection
set.seed(100)
sa_obj1 <- safs(x=PimaIndiansDiabetes_num2[, c(1:8)],
y=PimaIndiansDiabetes_num2[, 9],
safsControl = sa_ctrl1)
PimaIndiansDiabetes_num2 = transform(PimaIndiansDiabetes, pregnant = as.numeric(pregnant), glucose = as.numeric(glucose), pressure = as.numeric(pressure), triceps = as.numeric(triceps), insulin = as.numeric(insulin), mass = as.numeric(mass), pedigree = as.numeric(pedigree), age = as.numeric(age))
PimaIndiansDiabetes_num2[is.na(PimaIndiansDiabetes_num2)] = 0
sa_ctrl1 <- safsControl(functions = rfSA,
method = "repeatedcv",
repeats = 3,
improve = 5) # n iterations without improvement before a reset
# Genetic Algorithm feature selection
set.seed(100)
sa_obj1 <- safs(x=PimaIndiansDiabetes_num2[, c(1:8)],
y=PimaIndiansDiabetes_num2[, 9],
safsControl = sa_ctrl1)
print(sa_obj1$optVariables)
